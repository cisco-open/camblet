// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: v1/core/policy.proto

package core

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Policy_Connection_MutualTLSMode int32

const (
	Policy_Connection_UNSET   Policy_Connection_MutualTLSMode = 0
	Policy_Connection_DISABLE Policy_Connection_MutualTLSMode = 1
	Policy_Connection_STRICT  Policy_Connection_MutualTLSMode = 2
)

// Enum value maps for Policy_Connection_MutualTLSMode.
var (
	Policy_Connection_MutualTLSMode_name = map[int32]string{
		0: "UNSET",
		1: "DISABLE",
		2: "STRICT",
	}
	Policy_Connection_MutualTLSMode_value = map[string]int32{
		"UNSET":   0,
		"DISABLE": 1,
		"STRICT":  2,
	}
)

func (x Policy_Connection_MutualTLSMode) Enum() *Policy_Connection_MutualTLSMode {
	p := new(Policy_Connection_MutualTLSMode)
	*p = x
	return p
}

func (x Policy_Connection_MutualTLSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Connection_MutualTLSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_core_policy_proto_enumTypes[0].Descriptor()
}

func (Policy_Connection_MutualTLSMode) Type() protoreflect.EnumType {
	return &file_v1_core_policy_proto_enumTypes[0]
}

func (x Policy_Connection_MutualTLSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Connection_MutualTLSMode.Descriptor instead.
func (Policy_Connection_MutualTLSMode) EnumDescriptor() ([]byte, []int) {
	return file_v1_core_policy_proto_rawDescGZIP(), []int{1, 1, 0}
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_core_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_v1_core_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_v1_core_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policies) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors   []*structpb.Struct  `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	Certificate *Policy_Certificate `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Connection  *Policy_Connection  `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
	Egress      []*Policy           `protobuf:"bytes,4,rep,name=egress,proto3" json:"egress,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_core_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_core_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_v1_core_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetSelectors() []*structpb.Struct {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *Policy) GetCertificate() *Policy_Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Policy) GetConnection() *Policy_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Policy) GetEgress() []*Policy {
	if x != nil {
		return x.Egress
	}
	return nil
}

type Policy_Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadID string               `protobuf:"bytes,1,opt,name=workloadID,proto3" json:"workloadID,omitempty"`
	DnsNames   []string             `protobuf:"bytes,2,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	Ttl        *durationpb.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Policy_Certificate) Reset() {
	*x = Policy_Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_core_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Certificate) ProtoMessage() {}

func (x *Policy_Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_core_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Certificate.ProtoReflect.Descriptor instead.
func (*Policy_Certificate) Descriptor() ([]byte, []int) {
	return file_v1_core_policy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Policy_Certificate) GetWorkloadID() string {
	if x != nil {
		return x.WorkloadID
	}
	return ""
}

func (x *Policy_Certificate) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *Policy_Certificate) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Policy_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtls             Policy_Connection_MutualTLSMode `protobuf:"varint,1,opt,name=mtls,proto3,enum=nasp.api.v1.core.Policy_Connection_MutualTLSMode" json:"mtls,omitempty"`
	Passthrough      *wrapperspb.BoolValue           `protobuf:"bytes,2,opt,name=passthrough,proto3" json:"passthrough,omitempty"`
	AllowedSPIFFEIDs []string                        `protobuf:"bytes,3,rep,name=allowedSPIFFEIDs,proto3" json:"allowedSPIFFEIDs,omitempty"`
}

func (x *Policy_Connection) Reset() {
	*x = Policy_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_core_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Connection) ProtoMessage() {}

func (x *Policy_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_v1_core_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Connection.ProtoReflect.Descriptor instead.
func (*Policy_Connection) Descriptor() ([]byte, []int) {
	return file_v1_core_policy_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Policy_Connection) GetMtls() Policy_Connection_MutualTLSMode {
	if x != nil {
		return x.Mtls
	}
	return Policy_Connection_UNSET
}

func (x *Policy_Connection) GetPassthrough() *wrapperspb.BoolValue {
	if x != nil {
		return x.Passthrough
	}
	return nil
}

func (x *Policy_Connection) GetAllowedSPIFFEIDs() []string {
	if x != nil {
		return x.AllowedSPIFFEIDs
	}
	return nil
}

var File_v1_core_policy_proto protoreflect.FileDescriptor

var file_v1_core_policy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x61, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xfd, 0x07, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3d, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x4e, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x94, 0x02, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x88, 0x01, 0xba, 0x48,
	0x84, 0x01, 0xc8, 0x01, 0x01, 0x72, 0x7f, 0x32, 0x7d, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x2e, 0x5c, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x29, 0x28, 0x3f, 0x3a, 0x5c, 0x2f, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x2e, 0x5c, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x29, 0x29, 0x2a, 0x24, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x10, 0x64, 0x18, 0x01,
	0x22, 0x04, 0x72, 0x02, 0x68, 0x01, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0xd5, 0x03,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04,
	0x6d, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x73,
	0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x74, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x12, 0x8c, 0x02, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x50, 0x49,
	0x46, 0x46, 0x45, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0xdf, 0x01, 0xba,
	0x48, 0xdb, 0x01, 0x92, 0x01, 0xd7, 0x01, 0x18, 0x01, 0x22, 0xd2, 0x01, 0x72, 0xcf, 0x01, 0x32,
	0xcc, 0x01, 0x5e, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x28, 0x3f,
	0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x3f, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x7c, 0x5c, 0x7b, 0x5c, 0x7b, 0x5b, 0x2e,
	0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x5c, 0x7d, 0x5c, 0x7d, 0x29, 0x2b, 0x28, 0x3f, 0x3a,
	0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x3f, 0x3a,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5c,
	0x2f, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5c, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x29, 0x29, 0x2a, 0x24, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x49, 0x44, 0x73,
	0x22, 0x33, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x10, 0x02, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_core_policy_proto_rawDescOnce sync.Once
	file_v1_core_policy_proto_rawDescData = file_v1_core_policy_proto_rawDesc
)

func file_v1_core_policy_proto_rawDescGZIP() []byte {
	file_v1_core_policy_proto_rawDescOnce.Do(func() {
		file_v1_core_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_core_policy_proto_rawDescData)
	})
	return file_v1_core_policy_proto_rawDescData
}

var file_v1_core_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_core_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_v1_core_policy_proto_goTypes = []interface{}{
	(Policy_Connection_MutualTLSMode)(0), // 0: nasp.api.v1.core.Policy.Connection.MutualTLSMode
	(*Policies)(nil),                     // 1: nasp.api.v1.core.Policies
	(*Policy)(nil),                       // 2: nasp.api.v1.core.Policy
	(*Policy_Certificate)(nil),           // 3: nasp.api.v1.core.Policy.Certificate
	(*Policy_Connection)(nil),            // 4: nasp.api.v1.core.Policy.Connection
	(*structpb.Struct)(nil),              // 5: google.protobuf.Struct
	(*durationpb.Duration)(nil),          // 6: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),         // 7: google.protobuf.BoolValue
}
var file_v1_core_policy_proto_depIdxs = []int32{
	2, // 0: nasp.api.v1.core.Policies.policies:type_name -> nasp.api.v1.core.Policy
	5, // 1: nasp.api.v1.core.Policy.selectors:type_name -> google.protobuf.Struct
	3, // 2: nasp.api.v1.core.Policy.certificate:type_name -> nasp.api.v1.core.Policy.Certificate
	4, // 3: nasp.api.v1.core.Policy.connection:type_name -> nasp.api.v1.core.Policy.Connection
	2, // 4: nasp.api.v1.core.Policy.egress:type_name -> nasp.api.v1.core.Policy
	6, // 5: nasp.api.v1.core.Policy.Certificate.ttl:type_name -> google.protobuf.Duration
	0, // 6: nasp.api.v1.core.Policy.Connection.mtls:type_name -> nasp.api.v1.core.Policy.Connection.MutualTLSMode
	7, // 7: nasp.api.v1.core.Policy.Connection.passthrough:type_name -> google.protobuf.BoolValue
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_v1_core_policy_proto_init() }
func file_v1_core_policy_proto_init() {
	if File_v1_core_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_core_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_core_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_core_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_core_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_core_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_core_policy_proto_goTypes,
		DependencyIndexes: file_v1_core_policy_proto_depIdxs,
		EnumInfos:         file_v1_core_policy_proto_enumTypes,
		MessageInfos:      file_v1_core_policy_proto_msgTypes,
	}.Build()
	File_v1_core_policy_proto = out.File
	file_v1_core_policy_proto_rawDesc = nil
	file_v1_core_policy_proto_goTypes = nil
	file_v1_core_policy_proto_depIdxs = nil
}
